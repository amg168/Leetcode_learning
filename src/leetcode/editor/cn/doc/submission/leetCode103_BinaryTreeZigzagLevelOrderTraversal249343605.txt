/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> result = new ArrayList<List<Integer>>();
    //暴力解法，通过层序遍历，偶数层反转
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        if(root == null)
            return result;
        
        Queue<TreeNode> queue = new LinkedList();
        queue.add(root);

        //根据count来判断。偶数层正常遍历，奇数层反转
        int count = 0;
        while(!queue.isEmpty()){
            int size = queue.size();

            List<Integer> levelList = new ArrayList<>();

            for(int i=0;i<size;i++)
            {
                TreeNode cur = queue.poll();

                if(cur != null)
                    levelList.add(cur.val);

                if(cur.left != null)
                    queue.add(cur.left);
                if(cur.right != null)
                    queue.add(cur.right);
            }

            count+=1;
            if(count %2 == 0)
                Collections.reverse(levelList);

            result.add(levelList);
        }

        System.out.println(result);
        return  result;
    }

}

//runtime:2 ms
//memory:38.4 MB
