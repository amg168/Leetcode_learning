/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        if(root ==  null)
            return root;
            
        Queue<Node> stack=new LinkedList<Node>();

        root.next =  null;

        stack.add(root);

        while(!stack.isEmpty())
        {
            int size=stack.size();

            Node pre=null;

            for(int i=0;i<size;i++)
            {
                Node node=stack.poll();

                if(pre !=null)
                    pre.next=node;
                
                pre=node;

                if(node.left !=null)
                    stack.add(node.left);

                if(node.right !=null)
                    stack.add(node.right);
            }
            
        }

        return root;
    }
}
//runtime:2 ms
//memory:38.1 MB
