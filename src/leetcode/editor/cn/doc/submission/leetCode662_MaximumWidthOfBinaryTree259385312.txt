/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        //层序遍历得到每一层最左不为空的节点和最右边不为空的节点之间的距离
        Queue<AnnotatedNode> queue = new LinkedList<>();
        queue.add(new AnnotatedNode(root , 0 ,0));

        int curDepth = 0, left = 0, ans = 0;

        while(!queue.isEmpty()){
            AnnotatedNode cur = queue.poll();

            if(cur.node != null){
                queue.add(new AnnotatedNode(cur.node.left , cur.depth + 1 , cur.pos * 2));
                queue.add(new AnnotatedNode(cur.node.right , cur.depth + 1 , cur.pos * 2 + 1));

                if (curDepth != cur.depth) {
                    curDepth = cur.depth;
                    left = cur.pos;
                }
                ans = Math.max(ans, cur.pos - left + 1);
            }

        }

        return  ans;
    }

class AnnotatedNode {
        TreeNode node;
        int depth, pos;
        AnnotatedNode(TreeNode n, int d, int p) {
            node = n;
            depth = d;
            pos = p;
        }
    }

}

//runtime:1 ms
//memory:38.1 MB
