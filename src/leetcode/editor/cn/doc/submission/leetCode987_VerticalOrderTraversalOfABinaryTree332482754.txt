
    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode() {}
     * TreeNode(int val) { this.val = val; }
     * TreeNode(int val, TreeNode left, TreeNode right) {
     * this.val = val;
     * this.left = left;
     * this.right = right;
     * }
     * }
     */
class Solution {
    List<List<Integer>> result = new ArrayList<>();
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        if(root == null)
            return result;
        
        travel(root);
        return result;
    }

    public void travel(TreeNode root) {
        NodeByIndex rootIndex = new NodeByIndex(0, 0);

        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        //从列索引到list的映射
        Map<Integer,List<Integer>> map = new TreeMap<>(new Comparator<Integer>() {
            @Override
            public int compare(Integer in1, Integer in2) {
                return in1 - in2;
            }
        });
        //从值到列索引的映射
        Map<Integer,Integer> indexmap = new HashMap<>();
        List<Integer> firstLevel = new ArrayList<>();
        firstLevel.add(root.val);
        map.put(rootIndex.yIndex, firstLevel);
        indexmap.put(root.val, rootIndex.xIndex);


        while (!queue.isEmpty()) {
            int size = queue.size();

            for (int i = 0; i < size; i++) {
                TreeNode cur = queue.poll();
                Integer curNodeIndex = indexmap.get(cur.val);

                if (cur.left != null) {
                    queue.add(cur.left);
                    int leftNodeindex = curNodeIndex - 1;
                    //如果当前列没有访问过，则新建list，并添加
                    if(!map.containsKey(leftNodeindex)){
                        List<Integer> temp = new ArrayList<>();
                        temp.add(cur.left.val);
                        map.put(leftNodeindex,temp);
                    }else{
                        map.get(leftNodeindex).add(cur.left.val);
                    }
                    indexmap.put(cur.left.val, leftNodeindex);

                }
                if (cur.right != null) {
                    queue.add(cur.right);
                    int rightNodeIndex = curNodeIndex + 1;
                    if(!map.containsKey(rightNodeIndex)){
                        List<Integer> temp = new ArrayList<>();
                        temp.add(cur.right.val);
                        map.put(rightNodeIndex,temp);
                    }else{
                        map.get(rightNodeIndex).add(cur.right.val);
                    }
                    indexmap.put(cur.right.val, rightNodeIndex);

                }
            }
        }

        for(Map.Entry<Integer,List<Integer>> entry : map.entrySet()){
            //按照map的key值排序，value值进行自排序
            Collections.sort(entry.getValue());
            result.add(new LinkedList<>(entry.getValue()));
        }

        System.out.println(result);
    }

}

class NodeByIndex {
    int xIndex;
    int yIndex;

    public NodeByIndex(int xIndex, int yIndex) {
        this.xIndex = xIndex;
        this.yIndex = yIndex;
    }
}

//total_testcases:32
//total_correct:14
//input_formatted:[3,1,4,0,2,2]
//expected_output:[[0],[1],[3,2,2],[4]]
//code_output:[[0],[1],[2,2,3],[4]]
