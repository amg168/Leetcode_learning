/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    List<List<Integer>> result=new ArrayList<List<Integer>>();

    public List<List<Integer>> levelOrder(Node root) {
        if(root == null)
            return result;
            
        List<Integer> firstLevel=new ArrayList<Integer>();

        Queue<Node> queue=new LinkedList<Node>();

        queue.add(root);

        while(!queue.isEmpty())
        {
            List<Integer> level=new ArrayList<Integer>();

            int size=queue.size();

            for(int i=0;i<size;i++)
            {
                Node node=queue.poll();

                queue.addAll(node.children);

                level.add(node.val);
            }

            result.add(level);
        }

        return result;
    }
}
//runtime:3 ms
//memory:39.3 MB
