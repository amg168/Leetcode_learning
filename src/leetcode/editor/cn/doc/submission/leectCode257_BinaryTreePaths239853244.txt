/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        List<String> result = new ArrayList<String>();
		
		constructPath(root, "", result);
		
		return result;

    }

    public void constructPath(TreeNode root,String path,List<String> paths)
	{
		if(root != null)
		{
			StringBuffer pathB = new StringBuffer(path);
			
			pathB.append(Integer.toString(root.val));
			
			if(root.left == null && root.right == null )
			{
				paths.add(pathB.toString());
			}
			else {
				pathB.append("->");
				
				constructPath(root.left, pathB.toString(), paths);
				
				constructPath(root.right, pathB.toString(), paths);
			}
		}
	}
}
//runtime:1 ms
//memory:38.3 MB
