/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int ans ;
    public int longestUnivaluePath(TreeNode root) {
        ans = 0;
        path(root);

        return ans;
    }

    public int path(TreeNode node) {
        if (node == null)
            return 0;
        int valueLeft = 0;
        int valueRight = 0;

        int left = path(node.left);
        int right = path(node.right);
        if (node.left != null && node.val == node.left.val) {
            valueLeft += left + 1;
        }

        if (node.right != null && node.val == node.right.val) {
            valueRight += right + 1;
        }

        ans = Math.max(ans, valueLeft + valueRight);

        return Math.max(valueLeft, valueRight);
    }
}

//runtime:2 ms
//memory:41.5 MB
