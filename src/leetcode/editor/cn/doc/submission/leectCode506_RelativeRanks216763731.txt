class Solution {
    public String[] findRelativeRanks(int[] score) {
        Map<Integer, Integer> map = new TreeMap<Integer, Integer>();
		
		for(int i=0;i<score.length;i++)
			map.put(score[i], i);
		
		List<Map.Entry<Integer, Integer>> list = new ArrayList<Map.Entry<Integer, Integer>>(map.entrySet());
        Collections.sort(list, new Comparator<Map.Entry<Integer, Integer>>() {
            public int compare(Map.Entry<Integer, Integer> o1, Map.Entry<Integer, Integer> o2) {
                return o1.getKey()-o2.getKey();
            }
        });
       
        
        String[] ranks=new String[score.length];
        
        int i=0;
        for(Map.Entry<Integer, Integer> entry:map.entrySet())
        {
        	switch(score.length-i)
        	{
        	case 1:
        		ranks[entry.getValue()]="Gold Medal";
        		break;
        	case 2:
        		ranks[entry.getValue()]="Silver Medal";
        		break;
        	case 3:
        		ranks[entry.getValue()]="Bronze Medal";
        		break;
        	default:
        		ranks[entry.getValue()]=(score.length-i)+"";	
        		break;
        	}
        	 
        	i++;
        }
        
        return ranks;
    }
}
//runtime:16 ms
//memory:39.8 MB
